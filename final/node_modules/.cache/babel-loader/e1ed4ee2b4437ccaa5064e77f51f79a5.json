{"ast":null,"code":"export default class Game {\n  constructor() {\n    this.board = void 0;\n    this.isXTurn = void 0;\n    this.isOver = void 0;\n    this.winner = void 0;\n    this.board = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this.isXTurn = true;\n    this.isOver = false;\n    this.winner = \"In progress\";\n  }\n\n  setupNewGame() {\n    this.board = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this.isXTurn = true;\n    this.isOver = false;\n    this.winner = \"In progress\";\n  }\n\n  placeNewMark(id) {\n    if (this.board[id] != 0) {\n      alert(\"That is not a valid move\");\n      return;\n    }\n\n    ;\n\n    if (this.isXTurn) {\n      this.board[id] = 1;\n      this.isXTurn = false;\n    } else {\n      this.board[id] = 2;\n      this.isXTurn = true;\n    }\n\n    this.checkForWin();\n    this.checkForValidMoves();\n  }\n\n  checkForValidMoves() {\n    for (let i = 0; i < this.board.length; i++) {\n      if (this.board[i] == 0) {//then there are valid moves remaining\n      }\n    }\n  }\n\n  checkForWin() {\n    //Horizontal\n    for (let i = 0; i < 9; i += 3) {\n      let searchingFor = this.board[i];\n      let count = 0;\n\n      for (let j = i; j < 3; j++) {\n        if (this.board[j] == searchingFor) {\n          count++;\n        }\n      }\n\n      if (count == 3) {\n        this.isOver = true;\n\n        if (this.isXTurn) {\n          this.winner = \"O\";\n        } else {\n          this.winner = \"X\";\n        } //call some kind of over function here\n\n\n        alert(this.winner + \" is the winner!\");\n        this.setupNewGame();\n      }\n    } //Vertical\n\n\n    for (let i = 0; i < 3; i++) {\n      let searchingFor = this.board[i];\n      let count = 0;\n\n      for (let j = i; j < 9; j += 3) {\n        if (this.board[j] == searchingFor) {\n          count++;\n        }\n      }\n\n      if (count == 3) {\n        this.isOver = true;\n\n        if (this.isXTurn) {\n          this.winner = \"O\";\n        } else {\n          this.winner = \"X\";\n        } //call some kind of over function here\n\n\n        alert(this.winner + \" is the winner!\");\n        this.setupNewGame();\n      }\n    } //Diagonals\n\n\n    if (this.board[0] == this.board[4] && this.board[4] == this.board[8] || this.board[2] == this.board[4] && this.board[4] == this.board[6]) {\n      this.isOver = true;\n\n      if (this.isXTurn) {\n        this.winner = \"O\";\n      } else {\n        this.winner = \"X\";\n      } //call some kind of over function here\n\n\n      alert(this.winner + \" is the winner!\");\n      this.setupNewGame();\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Justin/Documents/Programming Projects/WebDev/426_final/final/src/Game.tsx"],"names":["Game","constructor","board","isXTurn","isOver","winner","setupNewGame","placeNewMark","id","alert","checkForWin","checkForValidMoves","i","length","searchingFor","count","j"],"mappings":"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","sourcesContent":["export default class Game {\r\n    board: number[];\r\n    isXTurn: boolean;\r\n    isOver: boolean;\r\n    winner: string;\r\n\r\n    constructor() {\r\n        this.board = [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this.isXTurn = true;\r\n        this.isOver = false;\r\n        this.winner = \"In progress\";\r\n    }\r\n\r\n    setupNewGame() {\r\n        this.board = [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this.isXTurn = true;\r\n        this.isOver = false;\r\n        this.winner = \"In progress\";\r\n    }\r\n\r\n    placeNewMark(id: number) {\r\n        if(this.board[id] != 0) {\r\n            alert(\"That is not a valid move\");\r\n            return;\r\n        };\r\n\r\n        if(this.isXTurn) {\r\n            this.board[id] = 1;\r\n            this.isXTurn = false;\r\n        } else {\r\n            this.board[id] = 2;\r\n            this.isXTurn = true;\r\n        }\r\n\r\n        this.checkForWin();\r\n\r\n        this.checkForValidMoves();\r\n    }\r\n\r\n    checkForValidMoves() {\r\n        for(let i: number = 0; i < this.board.length; i++) {\r\n            if(this.board[i] == 0) {\r\n                //then there are valid moves remaining\r\n            }\r\n        }\r\n    }\r\n\r\n    checkForWin() {\r\n        //Horizontal\r\n        for(let i: number = 0; i < 9; i+=3) {\r\n            let searchingFor = this.board[i];\r\n            let count: number = 0;\r\n            for(let j: number = i; j < 3; j++) {\r\n                if(this.board[j] == searchingFor) {\r\n                    count++;\r\n                }\r\n            }\r\n            if(count == 3) {\r\n                this.isOver = true;\r\n                if(this.isXTurn) {\r\n                    this.winner = \"O\";\r\n                } else {\r\n                    this.winner = \"X\";\r\n                }\r\n                //call some kind of over function here\r\n                alert(this.winner + \" is the winner!\");\r\n                this.setupNewGame();\r\n            }\r\n        }\r\n\r\n        //Vertical\r\n        for(let i: number = 0; i < 3; i++) {\r\n            let searchingFor = this.board[i];\r\n            let count: number = 0;\r\n            for(let j: number = i; j < 9; j+=3) {\r\n                if(this.board[j] == searchingFor) {\r\n                    count++;\r\n                }\r\n            }\r\n            if(count == 3) {\r\n                this.isOver = true;\r\n                if(this.isXTurn) {\r\n                    this.winner = \"O\";\r\n                } else {\r\n                    this.winner = \"X\";\r\n                }\r\n                //call some kind of over function here\r\n                alert(this.winner + \" is the winner!\");\r\n                this.setupNewGame();\r\n            }\r\n        }\r\n\r\n        //Diagonals\r\n        if((this.board[0] == this.board[4] && this.board[4] == this.board[8]) || (this.board[2] == this.board[4] && this.board[4] == this.board[6])) {\r\n            this.isOver = true;\r\n            if(this.isXTurn) {\r\n                this.winner = \"O\";\r\n            } else {\r\n                this.winner = \"X\";\r\n            }\r\n            //call some kind of over function here\r\n            alert(this.winner + \" is the winner!\");\r\n            this.setupNewGame();\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}